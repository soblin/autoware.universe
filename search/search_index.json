{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autoware Universe Code Reading","text":""},{"location":"#autoware-universe-code-reading","title":"Autoware Universe Code Reading","text":"<p>Autoware Universe\u306e\u30b3\u30fc\u30c9\u3092\u89e3\u8aac\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30b5\u30a4\u30c8</p>"},{"location":"#version","title":"version","text":"<p><code>683131483dfdfc14f1490cb061c3589701a53ea</code></p>"},{"location":"#nomenclature","title":"nomenclature","text":"\u8868\u8a18 \u30bf\u30a4\u30d7 \u4f8b \u592a\u659c\u5b57 \u6a5f\u80fd\u306b\u7279\u6709\u306e\u7528\u8a9e ShiftPullOver \u592a\u5b57 \u95a2\u6570\u540d Node::spin_some() \u659c\u4f53 \u30d1\u30c3\u30b1\u30fc\u30b8\u540d autoware_launch <code>\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af</code> <code>\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9</code>\uff0c<code>\u5909\u6570\u540d</code> <code>data = msg-&gt;position</code>, <code>is_in_transition</code> <code>$\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af</code> <code>\u6a5f\u80fd\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc</code> <code>$ekf.weight</code>"},{"location":"#adomonitions","title":"adomonitions","text":"<p>\u6ce8\u610f\u70b9</p> <p>\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u4e0a\u3067\u6ce8\u610f\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u70b9</p> <p>\u95a2\u9023\u60c5\u5831</p> <p>\u5b9f\u88c5\u306e\u80cc\u666f\u306b\u3042\u308b\u95a2\u9023\u60c5\u5831</p> <p>\u7591\u554f\u70b9</p> <p>\u8aad\u3093\u3067\u3044\u3066\u7591\u554f\u306b\u611f\u3058\u305f\u70b9</p> <p>\u30d0\u30b0</p> <p>\u610f\u56f3\u3057\u306a\u3044\u30d0\u30b0\u3092\u542b\u3093\u3067\u3044\u308b\u90e8\u5206\u306e\u89e3\u8aac</p>"},{"location":"map/","title":"map","text":""},{"location":"map/map_loader/","title":"map_loader","text":""},{"location":"map/map_loader/#map_loader","title":"map_loader","text":""},{"location":"map/map_loader/#lanelet2_map_loader","title":"lanelet2_map_loader","text":"<p>map_projector_loader \u30ce\u30fc\u30c9\u304c\u751f\u6210\u6642\u306b\u4e00\u5ea6\u3060\u3051<code>/map/map_projector_info</code>\u3092publish\u3059\u308b\u306e\u3067\uff0c\u305d\u308c\u3092sub\u3057\u305f\u3053\u306e\u30ce\u30fc\u30c9\u304c<code>/map/vector_map</code>\u3092publishs\u3059\u308b\uff0e</p> src/map_loader/lanelet2_map_loader_node.cpp:68:90<pre><code>void Lanelet2MapLoaderNode::on_map_projector_info(\nconst MapProjectorInfo::Message::ConstSharedPtr msg)\n{\nconst auto lanelet2_filename = get_parameter(\"lanelet2_map_path\").as_string();\nconst auto center_line_resolution = get_parameter(\"center_line_resolution\").as_double();\n\n// load map from file\nconst auto map = load_map(lanelet2_filename, *msg);\nif (!map) {\nRCLCPP_ERROR(get_logger(), \"Failed to load lanelet2_map. Not published.\");\nreturn;\n}\n\n// overwrite centerline\nlanelet::utils::overwriteLaneletsCenterline(map, center_line_resolution, false);\n\n// create map bin msg\nconst auto map_bin_msg = create_map_bin_msg(map, lanelet2_filename, now());\n\n// create publisher and publish\npub_map_bin_ =\ncreate_publisher&lt;HADMapBin&gt;(\"output/lanelet2_map\", rclcpp::QoS{1}.transient_local());\npub_map_bin_-&gt;publish(map_bin_msg);\n</code></pre> <p>QoS\u306f<code>transient_local</code>\u306a\u306e\u3067\uff0cvector map\u3092\u5229\u7528\u3059\u308b\u30ce\u30fc\u30c9\u3067vector map\u306b\u5bfe\u3059\u308bcallback\u304c\u4f55\u5ea6\u3082\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u306a\u3044\uff0e</p>"},{"location":"map/map_projection_loader/","title":"map_projection_loader","text":""},{"location":"map/map_projection_loader/#map_projection_loader","title":"map_projection_loader","text":"<p><code>MapProjectorLoader</code>\u306e\u751f\u6210\u6642\u306b\u4e00\u5ea6\u3060\u3051<code>/map/map_projector_info</code>\u304cpub\u3055\u308c\u308b\uff0e</p> src/map_projection_loader.cpp:85:97<pre><code>MapProjectionLoader::MapProjectionLoader() : Node(\"map_projection_loader\")\n{\nconst std::string yaml_filename = this-&gt;declare_parameter&lt;std::string&gt;(\"map_projector_info_path\");\nconst std::string lanelet2_map_filename =\nthis-&gt;declare_parameter&lt;std::string&gt;(\"lanelet2_map_path\");\n\nconst tier4_map_msgs::msg::MapProjectorInfo msg =\nload_map_projector_info(yaml_filename, lanelet2_map_filename);\n\n// Publish the message\nconst auto adaptor = component_interface_utils::NodeAdaptor(this);\nadaptor.init_pub(publisher_);\npublisher_-&gt;publish(msg);\n</code></pre>"},{"location":"planning/","title":"Index","text":""},{"location":"planning/#planning","title":"planning","text":""},{"location":"planning/behavior_path_goal_planner_module/","title":"behavior_path_goal_planner_module","text":""},{"location":"planning/behavior_path_goal_planner_module/#behavior_path_goal_planner_module","title":"behavior_path_goal_planner_module","text":"<p>rviz\u3067\u666e\u901a\u306b\u30b4\u30fc\u30eb\u3092\u7f6e\u3044\u305f\u6642\u306b\uff0c\u30b4\u30fc\u30eb\u304c\u901a\u5e38\u306e\u9053\u8def\u306e\u4e0a\u3060\u3068\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u304d\u3063\u3061\u308a\u3068\u5411\u304b\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u3082\u3057\u30b4\u30fc\u30eb\u3092\u8def\u80a9\u30ec\u30fc\u30f3\u306e\u4e0a\u306b\u7f6e\u304f\u3068\u524d\u5f8c\u306e\u8def\u99d0\u7981\u6b62\u30a8\u30ea\u30a2\u3084\u8def\u99d0\u8eca\u4e21\u3092\u8003\u616e\u3057\u3066\u30b4\u30fc\u30eb\u4f4d\u7f6e\u304c\u4fee\u6b63\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u307e\u305frviz\u306emodified goal plugin\u3092\u4f7f\u3046\u3068\uff0c\u901a\u5e38\u30ec\u30fc\u30f3\u306e\u4e0a\u306b\u7f6e\u3044\u305f\u30b4\u30fc\u30eb\u3082\u8def\u80a9\u306b\u81ea\u52d5\u7684\u306b\u5bc4\u305b\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308b\uff0e</p> <p>\u307e\u3060\u5e45\u5bc4\u305b\u306e\u7d4c\u8def\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u6bb5\u968e\u3067\u7d4c\u8def\u304c\u9ec4\u8272\u304f\u306a\u3063\u3066\u304a\u308a\u304a\u305d\u3089\u304f\u6e1b\u901f(deceleratePath)\u6307\u793a\u304c\u51fa\u3055\u308c\u3066\u3044\u308b\uff0e\u3059\u3050\u306b\u306f\u53cd\u6620\u3055\u308c\u306a\u3044\u304c\u7d4c\u8def\u304c\u898b\u3064\u304b\u3063\u305f\u3089</p> planning/behavior_path_goal_planner_module/src/goal_planner_module.cpp:1191:1198<pre><code>      parameters_-&gt;object_recognition_collision_check_hard_margins.back());\n\n// update thread_safe_data_\nif (path_and_goal_opt) {\nauto [pull_over_path, modified_goal] = *path_and_goal_opt;\ndeceleratePath(pull_over_path);\nthread_safe_data_.set(\ngoal_candidates, pull_over_path_candidates, pull_over_path, modified_goal);\n</code></pre> <p>\u306e\u51e6\u7406\u304c\u3055\u308c\u3066\u3044\u308b\uff0e</p> <p>\u307e\u305f\u305d\u306e\u3068\u304d\u3059\u3067\u306bfoundPullOver\u3067\u3042\u308c\u3070</p> planning/behavior_path_goal_planner_module/src/goal_planner_module.cpp:919:926<pre><code>    RCLCPP_WARN_THROTTLE(\ngetLogger(), *clock_, 5000, \"Not safe against dynamic objects, generate stop path\");\ndebug_stop_pose_with_info_.set(std::string(\"feasible stop after approval\"));\n} else {\n// situation : (safe against static and dynamic objects) or (safe against static objects and\n// before approval) don't stop\n// keep stop if not enough time passed,\n// because it takes time for the trajectory to be reflected\n</code></pre> <p>\u304c\u5b9f\u884c\u3055\u308c\u308b\uff0e\u3053\u308c\u306f\u969c\u5bb3\u7269\u306a\u3069\u304c\u306a\u3044\u5834\u5408\u3067\u3042\u308b\uff0e\u307e\u305fapproved\u3067\u306a\u304f\u304b\u3064hasDecidedPath\u3067\u306a\u3044\u5834\u5408\u3067\u3082\u5e45\u5bc4\u305b\u306e\u7d4c\u8def\u306f\u51fa\u308b\uff0ehasNotDecidedPath\u306e\u5834\u5408\u306fneedPathUpdate\u3067\u5b9a\u671f\u7684\u306b\u7d4c\u8def\u306e\u66f4\u65b0\u3092\u8a66\u307f\u3066\u3044\u308b \u3063\u307d\u3044\uff0e</p>"},{"location":"planning/behavior_path_goal_planner_module/#_1","title":"\u7d4c\u8def\u3092\u78ba\u5b9a\u3055\u305b\u308b\u30bf\u30a4\u30df\u30f3\u30b0","text":"<p>\u59cb\u3081\u306b\u8def\u80a9\u306b\u30b4\u30fc\u30eb\u3092\u7f6e\u3044\u305f\u3068\u3057\u3066\uff0c\u521d\u3081\u304b\u3089\u30b7\u30d5\u30c8\u3059\u308b\u5e45\u5bc4\u305b\u306e\u7d4c\u8def\u304c\u51fa\u308b\u8a33\u3067\u306f\u306a\u3044(todo: \u521d\u3081\u306e\u3042\u306e\u72b6\u614b\u304c\u3069\u3053\u3067\u305d\u3046\u306a\u3063\u3066\u308b\u304b\u66f8\u304f)\uff0e\u57fa\u672c\u7684\u306b</p> <ul> <li>NOT_DECIDED\uff1a\u307e\u3060\u30b4\u30fc\u30eb\u306e\u305a\u3063\u3068\u624b\u524d\u306b\u3044\u308b\u306e\u3067<ul> <li>\u672c\u5f53\u306b\u4f55\u3082\u3057\u306a\u3044(todo: idle)\uff0e\u305f\u3060\u3057\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u5019\u88dc\u7d4c\u8def\u306e\u751f\u6210\u306f\u958b\u59cb\u3055\u308c\u3066\u3044\u308b</li> <li>\u5e45\u5bc4\u305b\u7d4c\u8def\u306e\u5019\u88dc\u306e\u751f\u6210\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u304c\uff0c\u66ab\u5b9a\u5019\u88dc\u7d4c\u8def\u306e\u5e45\u5bc4\u305b\u958b\u59cb\u5730\u70b9\u304b\u3089\u307e\u3060\u9060\u3044\u306e\u3067\u4f55\u3082\u3057\u306a\u3044(todo: candidate\u3067\u51fa\u529b\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0)</li> </ul> </li> <li>DECIDING\uff1aGoalPlanneModule::isSafePath == <code>true</code>\u307e\u305f\u306f isActivated == <code>true</code>\u3067\uff0c\u66ab\u5b9a\u5019\u88dc\u7d4c\u8def\u306e\u5e45\u5bc4\u305b\u958b\u59cb\u5730\u70b9\u306e\u624b\u524d<code>$pull_over.decide_path_distance</code>\u306b\u307e\u3067\u8fd1\u3065\u3044\u305f\u3089\u5b9f\u969b\u306bplann   ingn\u306e\u51fa\u529b\u3068\u3057\u3066\u5e45\u5bc4\u305b\u7d4c\u8def\u3078\u306e\u8ffd\u5f93\u3092\u958b\u59cb\u3059\u308b\uff08\u304c\u3057\u3070\u3089\u304f\u76f4\u7dda\u533a\u9593\u304c\u7d9a\u304f\u306e\u3067\u307e\u3060\u51fa\u529b\u7d4c\u8def\u306f\u5909\u308f\u308a\u3046\u308b\uff09<ul> <li>GoalSearcher::isSafeGoalWithMarginScaleFactor\u3067\u30b4\u30fc\u30eb\u5730\u70b9\u304c\u5371\u967a\u3068\u5224\u65ad\u3055\u308c\u305f\u308aGoalPlannerModule::checkObjectsCollision\u3067\u5371\u967a\u3068\u5224\u5b9a\u3055\u308c\u305f\u3089NOT_DECIDED\u306b\u623b\u308b</li> </ul> </li> <li>DECIDED\uff1aDECIDING\u304c1.0\u79d2\u4ee5\u4e0a\u7d9a\u3044\u305f\u3089\u3053\u306e\u72b6\u614b\u306b\u306a\u308a\uff0c\u4ee5\u964d\u306f\u305a\u3063\u3068\u3053\u306e\u72b6\u614b\u306b\u306a\u308b\uff0e</li> </ul> <p>GoalPlannerModule::checkDecidingPathStatus\u3067</p>"},{"location":"planning/behavior_path_planner/","title":"behavior_path_planner(PlannerManager)","text":""},{"location":"planning/behavior_path_planner/#behavior_path_plannerplannermanager","title":"behavior_path_planner(PlannerManager)","text":""},{"location":"planning/behavior_path_planner/#_1","title":"\u6982\u8981","text":"<p>\u767b\u9332\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5143\u306f<code>manager_ptrs_</code>\u3067\u3042\u308a\uff0c\u305d\u306e\u4e2d\u304b\u3089</p> <ol> <li><code>request_modules</code></li> <li><code>candidate_module_ptrs_</code></li> <li><code>approved_module_ptrs_</code></li> </ol> <p>\u3078\u3068\u6607\u683c\u3057\u3066\u3044\u304f\uff0e<code>candidate_module_ptrs_</code>\u306e\u4e2d\u3067\u4e00\u756a\u512a\u5148\u5ea6\u304c\u9ad8\u304f<code>isWaitingApproval</code>\u3067\u306a\u3044\u3082\u306e\u304ccandidate module\u3092\u3059\u3063\u98db\u3070\u3057\u3066<code>approved_module_ptrs_</code>\u306b\u5165\u308b\uff0e\u305d\u308c\u4ee5\u5916\u306e\u3082\u306e\u306f\u4e00\u65e6<code>candidate_module_ptrs_</code>\u306b\u6b8b\u308a\uff0c\u6b21\u306e\u30b5\u30a4\u30af\u30eb\u3067<code>approved_module_ptrs_</code>\u306b\u8ffd\u52a0\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3055\u308c\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner/#_2","title":"\u8a73\u7d30","text":""},{"location":"planning/behavior_path_planner/#manager_ptrs_","title":"manager_ptrs_\u306e\u521d\u671f\u5316","text":"<p>BehaviorPathPlanner\u304c\u521d\u671f\u5316\u306e\u969b\u306b\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\uff0c\u305d\u3053\u3067<code>manager_ptrs_</code>\u304c\u521d\u671f\u5316\u3055\u308c\u3066\u4ee5\u964d\u306f<code>manager_ptrs_</code>\u306f\u4e0d\u5909</p> behavior_path_planner/src/behavior_path_planner_node.cpp:138:143@BehaviorPathPlannerNode<pre><code>    for (const auto &amp; name : declare_parameter&lt;std::vector&lt;std::string&gt;&gt;(\"launch_modules\")) {\n// workaround: Since ROS 2 can't get empty list, launcher set [''] on the parameter.\nif (name == \"\") {\nbreak;\n}\nplanner_manager_-&gt;launchScenePlugin(*this, name);\n</code></pre> behavior_path_planner/src/planner_manager.cpp:44:59<pre><code>void PlannerManager::launchScenePlugin(rclcpp::Node &amp; node, const std::string &amp; name)\n{\nif (plugin_loader_.isClassAvailable(name)) {\nconst auto plugin = plugin_loader_.createSharedInstance(name);\nplugin-&gt;init(&amp;node);\n\n// Check if the plugin is already registered.\nfor (const auto &amp; running_plugin : manager_ptrs_) {\nif (plugin-&gt;name() == running_plugin-&gt;name()) {\nRCLCPP_WARN_STREAM(node.get_logger(), \"The plugin '\" &lt;&lt; name &lt;&lt; \"' is already loaded.\");\nreturn;\n}\n}\n\n// register\nmanager_ptrs_.push_back(plugin);\n</code></pre>"},{"location":"planning/behavior_path_planner/#_3","title":"\u5404\u30d5\u30e9\u30b0\u306e\u5b9f\u969b\u306e\u5024","text":"<p>default\u306e\u5024\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p> <pre><code>  virtual bool isAlwaysExecutableModule() const { return false; }\n\nvirtual bool isSimultaneousExecutableAsApprovedModule() const\n{\nif (isAlwaysExecutableModule()) {\nreturn true;\n}\n\nreturn config_.enable_simultaneous_execution_as_approved_module;\n}\n\nvirtual bool isSimultaneousExecutableAsCandidateModule() const\n{\nif (isAlwaysExecutableModule()) {\nreturn true;\n}\n\nreturn config_.enable_simultaneous_execution_as_candidate_module;\n}\n</code></pre> Property start avoidance lane_change dynamic_avoidance goal external_lane_change side_shift isAlwaysExecutable <code>false</code>(default) <code>false</code>(default) <code>false</code>(default) <code>true</code> fixed\u306a\u3089<code>true</code> <code>false</code>(default) <code>false</code>(default) isSimultaneousExecutableAsApprovedModule \u72b6\u6cc1\u306b\u3088\u308a\u5909\u5316 <code>true</code> <code>true</code> <code>true</code> fixed\u306a\u3089true,\u305d\u3046\u3067\u306a\u3051\u308c\u3070<code>true</code> <code>false</code> <code>false</code> isSimultaneousExecutableAsCandidateModule \u72b6\u6cc1\u306b\u3088\u308a\u5909\u5316 <code>false</code> <code>true</code> <code>true</code> fixed\u306a\u3089true,\u305d\u3046\u3067\u306a\u3051\u308c\u3070<code>false</code> <code>true</code> <code>false</code> isKeepLast(virtual\u3067\u306f\u306a\u3044) <code>false</code> <code>false</code> <code>false</code> <code>true</code> <code>true</code> <code>false</code> <code>false</code> <p>start_planner\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p> planning/behavior_path_start_planner_module/src/manager.cpp:736:763<pre><code>bool StartPlannerModuleManager::isSimultaneousExecutableAsApprovedModule() const\n{\nif (observers_.empty()) {\nreturn config_.enable_simultaneous_execution_as_approved_module;\n}\n\nconst auto checker = [this](const SceneModuleObserver &amp; observer) {\nif (observer.expired()) {\nreturn config_.enable_simultaneous_execution_as_approved_module;\n}\n\nconst auto start_planner_ptr = std::dynamic_pointer_cast&lt;StartPlannerModule&gt;(observer.lock());\n\n// Currently simultaneous execution with other modules is not supported while backward driving\nif (!start_planner_ptr-&gt;isDrivingForward()) {\nreturn false;\n}\n\n// Other modules are not needed when freespace planning\nif (start_planner_ptr-&gt;isFreespacePlanning()) {\nreturn false;\n}\n\nreturn config_.enable_simultaneous_execution_as_approved_module;\n};\n\nreturn std::all_of(observers_.begin(), observers_.end(), checker);\n}\n</code></pre> planning/behavior_path_start_planner_module/src/manager.cpp:765:791<pre><code>bool StartPlannerModuleManager::isSimultaneousExecutableAsCandidateModule() const\n{\nif (observers_.empty()) {\nreturn config_.enable_simultaneous_execution_as_candidate_module;\n}\n\nconst auto checker = [this](const SceneModuleObserver &amp; observer) {\nif (observer.expired()) {\nreturn config_.enable_simultaneous_execution_as_candidate_module;\n}\n\nconst auto start_planner_ptr = std::dynamic_pointer_cast&lt;StartPlannerModule&gt;(observer.lock());\n\n// Currently simultaneous execution with other modules is not supported while backward driving\nif (start_planner_ptr-&gt;isDrivingForward()) {\nreturn false;\n}\n\n// Other modules are not needed when freespace planning\nif (start_planner_ptr-&gt;isFreespacePlanning()) {\nreturn false;\n}\n\nreturn config_.enable_simultaneous_execution_as_candidate_module;\n};\n\nreturn std::all_of(observers_.begin(), observers_.end(), checker);\n</code></pre>"},{"location":"planning/behavior_path_planner/#getrequestmodules","title":"getRequestModules()","text":"<p>\u57fa\u672c\u7684\u306b\u4eca<code>candidate_module_ptrs_</code>\u306b\u3044\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u3046\u3061\uff0c\u73fe\u5728\u306e<code>approved_module_ptrs_</code>\u3068\u540c\u6642\u5b9f\u884c\u53ef\u80fd\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u6c42\u3081\u3066\u3044\u308b\uff0e\u307e\u305f\u307b\u3068\u3093\u3069\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f<code>$max_size == 1</code>\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u7d50\u5c40<code>approved_module_ptrs_</code>\u3068<code>candidate_module_ptrs_</code>\u306b\u3044\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089request modules\u304c\u6c42\u3081\u3089\u308c\u308b\uff0e</p> <p>\u6ce8\u610f</p> <p>\u305f\u3060\u3057\uff08\u304a\u305d\u3089\u304f\u5b9f\u88c5\u90fd\u5408\u3067\uff09<code>candidate_module_ptrs_</code>\u306e\u4e2d\u306b\u540c\u3058\u540d\u524d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308c\u3070<code>request_modules</code>\u306e\u4e2d\u306b<code>shared_ptr</code>\u306e\u30b3\u30d4\u30fc\u304c\u8ffd\u52a0\u3055\u308c\uff0c\u3053\u306e\u95a2\u6570\u3092\u547c\u3093\u3060\u76f4\u5f8c\u3067\u306f\u540c\u3058\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5171\u6709\u3057\u305f\u72b6\u614b\u306b\u306a\u308b\uff0erunRequestModules()\u306e\u4e2d\u306eupdateCandidateModules()\u3067\u3053\u306e\u5171\u6709\u72b6\u614b\u306f\u89e3\u6d88\u3055\u308c\u308b\uff0e</p> <p>module\u3092run\u3055\u305b\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067module\u306e\u72b6\u614b\u9077\u79fb\u306a\u3069\u306b\u306f\u5168\u304f\u5f71\u97ff\u3057\u306a\u3044\uff0e</p>"},{"location":"planning/behavior_path_planner/#_4","title":"\u526f\u4f5c\u7528","text":"<p>\u306a\u3057</p>"},{"location":"planning/behavior_path_planner/#_5","title":"\u51e6\u7406","text":"<p>conditions\u306e\u4e21\u65b9\u306b<code>not getManager(m)-&gt;isAlwaysExecutable() &amp;&amp;</code>\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3088\u308asupp\u304c\u5927\u304d\u3044hasNonAlwaysExecutableApproveModules()\uff08\u300c\u3069\u308c\u304b\u306eapproved modules\u304cnot isAlwaysExecutable\u3067\u3042\u308b\u300d\uff09\u306f\u4e0d\u8981\u3067\u306f\u3042\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:271:271@getRequestModules<pre><code>    if (!manager_ptr-&gt;isAlwaysExecutableModule() &amp;&amp; hasNonAlwaysExecutableApprovedModules()) {\n</code></pre> <p><code>manager_ptrs_</code>\u306e\u4e2d\u306e\u5404<code>manager_ptr</code>\u306b\u3064\u3044\u3066</p> <ul> <li>\u3082\u3057<code>manager_ptr</code>\u304cisAlwaysExecutable\u3067\u306a\u3044\u5834\u5408<ul> <li>\u81ea\u8eab\u306fisSimultaneousExecutableAsApprovedModule()\u3067\u306a\u304f\uff0c\u304b\u3064<code>approved_modules_ptrs_</code>\u306e\u4e2d\u306b\u300cisAlwaysExecutable()\u3067\u306a\u3044\u304cisSimultaneousExecutable()\u3067\u3042\u308b\u300d\u8981\u7d20\u304c\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3053\u306e<code>manager_ptr</code>\u306f<code>request_modules</code>\u306b\u306f\u305b\u305a\u30b9\u30ad\u30c3\u30d7\uff0ccontinue</li> <li>\u3042\u308b\u3044\u306f<code>approved_modules_ptrs_</code>\u306e\u4e2d\u306b\u300cisAlwaysExecutable()\u3067\u306a\u3044\u304b\u3064isSimultaneousExecutable()\u3067\u3082\u306a\u3044\u300d\u8981\u7d20\u304c\u4e00\u3064\u3067\u3082\u5b58\u5728\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3053\u306e<code>manager_ptr</code>\u306f<code>request_modules</code>\u306b\u306f\u305b\u305a\u30b9\u30ad\u30c3\u30d7\uff0ccontinue</li> </ul> </li> <li>\u3082\u3057<code>candidate_module_ptrs_</code>\u306b\u540c\u540d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u306a\u3044\u5834\u5408\uff0c<code>manager_ptr-&gt;canLaunchNewModule()</code>\u304b\u3064<code>manager_ptr-&gt;isExecutionRequested()</code>\u3067\u3042\u308c\u3070<code>request_modules</code>\u306b<code>manager_ptr-&gt;getIdleModule()</code>\u3092\u8ffd\u52a0\u3057\u3066continue<ul> <li>\u3082\u3057\u540c\u540d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c<code>approved_module_ptrs_</code>\u306b\u3042\u308b\u5834\u5408<code>module_size &gt;= 1</code>\u3067\u3042\u308b\u306e\u3067\uff0c<code>$max_module_size == 1</code>\u306e\u8a2d\u5b9a\u306e\u4e0b\u3067\u306f<code>manager_ptr-&gt;canLaunchNewModule()</code>\u3067\u5f3e\u304b\u308c\u308b\u306e\u3067<code>request_modules</code>\u306b\u306f\u8ffd\u52a0\u3055\u308c\u306a\u3044\uff08\u3053\u3053\u3067\u6697\u9ed9\u7684\u306b<code>approved_modules</code>\u3068\u306a\u3063\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092<code>request_modules</code>\u306b\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\uff0e\u304b\u306a\u308a\u6c17\u4ed8\u304d\u306b\u304f\u3044\uff09</li> </ul> </li> <li>\u3082\u3057<code>candidate_module_ptrs_</code>\u306b\u540c\u540d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb(itr)\u304c\u304a\u308a\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304cisLockedNewModuleLaunch()\u3067\u3042\u308b\u5834\u5408\uff0c<code>request_modules</code>\u306b\u306f\u305d\u306eitr\u3060\u3051\u3092\u5165\u308c\u76f4\u3057\u3066break\u3059\u308b(<code>request_modules</code>\u304c1\u500b\u3060\u3051\u306b\u306a\u308b)(\u3053\u306e<code>manager_ptr</code>\u306f\u7121\u8996)</li> <li>\u3082\u3057<code>candidate_module_ptrs_</code>\u306b\u540c\u540d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb(itr)\u304c\u304a\u308a\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304cisLockedNewModuleLaunch()\u3067\u306a\u3044\u306a\u3089\uff0c<code>request_modules</code>\u306b\u306f\u305d\u306eitr\u3092\u8ffd\u52a0\u3057\u3066continue</li> </ul> <p>\u3064\u307e\u308a</p> <ul> <li><code>approved_module_ptrs_</code>\u304c\u7a7a\u306a\u3089\u4efb\u610f\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c<code>request_modules</code>\u306bjoin\u3067\u304d\u308b</li> <li>isAlwaysExecutable()\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306f<code>request_modules</code>\u306b\u901a\u5e38\u306e\u30c1\u30a7\u30c3\u30af\u306e\u307f\u3067\u81ea\u7531\u306b\u51fa\u5165\u308a\u3067\u304d\u308b\u3057\uff0c\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306ejoin\u3082\u90aa\u9b54\u3057\u306a\u3044</li> <li>isAlwaysExecutable()\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u9664\u5916\u3057\u305f\u5834\u5408\uff0c<code>request_modules</code>\u306e\u4e2d\u306b\u306f<ul> <li>not isSimultaneousExecutable()\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u304c1\u500b</li> <li>isSimultaneousExecutable()\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u8907\u6570\u500b</li> <li>\u306e\u3069\u3061\u3089\u304b\u3057\u304b\u3042\u308a\u5f97\u306a\u3044</li> </ul> </li> </ul> <p>\u524d\u56de\u304b\u3089\u306e\u30b5\u30a4\u30af\u30eb\u306e\u6b8b\u308a\u3067<code>candidate_module_ptrs_</code>\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u304c\u73fe\u5728\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u306f<code>request_modules</code>\u306b\u306a\u3089\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\uff0c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3064\u3044\u3066\u7acb\u3061\u4e0a\u3052\u306e\u53ef\u5426\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner/#runkeeplastmodules","title":"runKeepLastModules()","text":"<p>approved\u306akeep last module\u3092bootstrap\u5b9f\u884c\u3059\u308b\uff0e\u9006\u306brunApprovedModules\u3067\u306fkeep last module\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner/#_6","title":"\u526f\u4f5c\u7528","text":"<p>\u306a\u3057</p>"},{"location":"planning/behavior_path_planner/#_7","title":"\u51e6\u7406","text":"<p><code>approved_module_ptr_</code>\u306e\u3046\u3061isKeepLast()\u3067\u3042\u308b\u3082\u306e\u3092\u5b9f\u884c\u3059\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:405:412<pre><code>  auto output = previous_output;\nstd::for_each(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), [&amp;](const auto &amp; m) {\nif (getManager(m)-&gt;isKeepLast()) {\noutput = run(m, data, output);\n}\n});\n\nreturn output;\n</code></pre>"},{"location":"planning/behavior_path_planner/#runrequestmodules","title":"runRequestModules()","text":"<p>\u6ce8\u610f</p> <p><code>candidate_module_ptrs_</code>\u3068<code>request_modules</code>\u306f<code>shared_ptr</code>\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u306e\u3067\uff0c<code>request_module</code>\u306b\u5bfe\u3057\u3066run()\u3092\u547c\u3093\u3067\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u304c\u304d\u3061\u3093\u3068<code>candidate_module_ptrs_</code>\u306b\u5bfe\u3057\u3066run()\u3092\u547c\u3079\u3066\u3044\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner/#_8","title":"\u526f\u4f5c\u7528","text":"<ul> <li><code>candidate_module_ptrs_</code>\u306e\u8981\u7d20\u6570\u304c\u5909\u5316\u3059\u308b</li> </ul>"},{"location":"planning/behavior_path_planner/#_9","title":"\u524d\u63d0","text":"<p><code>request_modules</code>\u306f</p> <ul> <li>not isSimultaneousExecutableAsApprovedModule()\u304c1\u500b\u3060\u3051 OR</li> <li>isSimultaneousExecutableAsApprovedModule()\u304c\u8907\u6570\u500b \u306e\u3069\u3061\u3089\u304b</li> </ul> <p>\u306b\u52a0\u3048\u3066</p> <ul> <li>isAlwaysExecutable()\u304c\u8907\u6570\u500b</li> </ul>"},{"location":"planning/behavior_path_planner/#_10","title":"\u51e6\u7406","text":"<p>\u307e\u305a<code>request_modules</code>\u3092sortByPriority()\u3059\u308b\uff0e\u3053\u308c\u306f<code>priority</code>\u306e\u5024\u3060\u3051\u306b\u57fa\u3065\u304f\uff08\u6607\u9806\uff0cpriority\u304c\u5c0f\u3055\u3044\u307b\u3069\u91cd\u8981\u3067\u914d\u5217\u306e\u5148\u982d\u306b\u6765\u308b\uff09\uff0e</p> <p><code>sorted_request_modules</code>\u306e\u4e2d\u306e\u5404<code>request_module</code>\u306b\u3064\u3044\u3066</p> <ul> <li>\u3082\u3057isAlwaysExecutable()\u306a\u3089\u3070<code>executable_modules</code>\u306b\u8ffd\u52a0\u3057\u3066continue</li> <li>\u3082\u3057<code>executable_modules</code>\u304c\u7a7a\uff0c\u3042\u308b\u3044\u306f\u5168\u3066isAlwaysExecutable()\u306a\u3089\u3070<code>executable_modules</code>\u306b\u8ffd\u52a0\u3057\u3066continue</li> <li>\u3082\u3057\u81ea\u8eab\u306fisSimultaneousExecutableAsCandidateModule()\u304b\u3064\uff0c<code>executable_modules</code>\u306e\u4e2d\u306b\u300cnot isAlwaysExecutable()\u304b\u3064isSimultaneousExecutableAsCandidateModule()\u300d\u306e\u3082\u306e\u304c\u3042\u308c\u3070<code>executale_modules</code>\u306b\u8ffd\u52a0\u3057\u3066continue</li> </ul> <p>\u3064\u307e\u308a\u5165\u529b\u306e<code>request_modules</code>\u306e\u3046\u3061</p> <ul> <li>isAlwaysExecutable()\u306f\u5168\u3066</li> </ul> <p>\u3068\uff0c\u305d\u308c\u3089\u3092\u9664\u3044\u305f\u5185\u3067</p> <ul> <li>\u4e00\u756a\u521d\u3081\u306e\u8981\u7d20\u304cnot isSimultaneousExecutableAsCandidateModule()\u3067\u3042\u3063\u305f\u5834\u5408\u305d\u306e\u8981\u7d20\u306e\u307f OR</li> <li>\u5168\u3066\u306eisSimultaneousExecutableAsCandidateModule() \u306e\u3069\u3061\u3089\u304b</li> </ul> <p>\u306e\u7d44\u307f\u5408\u308f\u305b\u304c<code>executable_modules</code>\u306b\u306a\u308b\uff0estart_planner \u306e\u3088\u3046\u306bnot isSimultaneousExecutableAsCandidateModule()\u3067\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306f<code>sorted_request_modules</code>\u306e\u5148\u982d\u306b\u5165\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3042\u308b\u305f\u3081\uff0c<code>$priority = 0</code>\u306e\u3088\u3046\u306b\u512a\u5148\u5ea6\u3092\u9ad8\u3081\u3066sortByPriority()\u3055\u305b\u308b\u3053\u3068\u3067\u305d\u308c\u3092\u9054\u6210\u3057\u3066\u3044\u308b\uff0e</p> <p>\u6b21\u306b<code>executable_modules</code>\u306e\u51fa\u529b\u3092\u5f97\u308b\uff08\u3053\u3053\u3067\u306fbootstrap\u306f\u305b\u305a\u72ec\u7acb\u306b\u51fa\u529b\u3092\u683c\u7d0d\u3059\u308b\uff09\uff0eexecutbale_modules\u3068<code>candidate_module_ptrs_</code>\u306f\u91cd\u8907\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3053\u3067<code>candidate_module</code>\u3092\u9593\u63a5\u7684\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:559:567@runRequetsModules<pre><code>  for (const auto &amp; module_ptr : executable_modules) {\nconst auto &amp; manager_ptr = getManager(module_ptr);\n\nif (!manager_ptr-&gt;exist(module_ptr)) {\nmanager_ptr-&gt;registerNewModule(\nstd::weak_ptr&lt;SceneModuleInterface&gt;(module_ptr), previous_module_output);\n}\n\nresults.emplace(module_ptr-&gt;name(), run(module_ptr, data, previous_module_output));\n</code></pre> behavior_path_planner/include/behavior_path_planner/planner_manager.hpp:276:301<pre><code>  BehaviorModuleOutput run(\nconst SceneModulePtr &amp; module_ptr, const std::shared_ptr&lt;PlannerData&gt; &amp; planner_data,\nconst BehaviorModuleOutput &amp; previous_module_output) const\n{\nstop_watch_.tic(module_ptr-&gt;name());\n\nmodule_ptr-&gt;setData(planner_data);\nmodule_ptr-&gt;setPreviousModuleOutput(previous_module_output);\n\nmodule_ptr-&gt;lockRTCCommand();\nconst auto result = module_ptr-&gt;run();\nmodule_ptr-&gt;unlockRTCCommand();\n\nmodule_ptr-&gt;postProcess();\n\nmodule_ptr-&gt;updateCurrentState();\n\nmodule_ptr-&gt;publishRTCStatus();\n\nmodule_ptr-&gt;publishSteeringFactor();\n\nmodule_ptr-&gt;publishObjectsOfInterestMarker();\n\nprocessing_time_.at(module_ptr-&gt;name()) += stop_watch_.toc(module_ptr-&gt;name(), true);\n\nreturn result;\n</code></pre> <p>run()\u3059\u308b\u3068\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d50\u679c\u304c\u5206\u304b\u308b\u306e\u3067\uff0c<code>getCurrentStauts() == ModuleStatus::FAILURE</code>\u307e\u305f\u306f<code>getCurrentStauts() == ModuleStatus::SUCCESS</code>\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fdeleteExpiredModules()\u3057\u305f\u3046\u3048\u3067<code>executable_modules</code>\u304b\u3089\u3082\u524a\u9664\u3059\u308b\uff0e</p> <p>\u3082\u3057<code>executable_modules</code>\u304c\u7a7a\u3067\u3042\u308c\u3070clearCandidateModule()\u3092\u3057\u3066return\uff0e\u3053\u306e\u6642\u70b9\u3067<code>executable_modules</code>\u306f<code>IDLE</code>\u304b<code>RUNNING</code>\u304b<code>WAITING_APPROVAL</code>\u306e\u3069\u308c\u304b\u3067\u3042\u308b\uff08todo: <code>IDLE</code>\u72b6\u614b\u3067updateCurrentStatus()\u3092\u547c\u3076\u3068\u5fc5\u305a<code>RUNNING</code>\u306b\u306a\u308b\u306e\u3067\uff0c<code>RUNNING</code>\u306e\u306f\u305a\uff09\uff0e</p> <pre><code>enum class ModuleStatus {\nIDLE = 0,\nRUNNING = 1,\nWAITING_APPROVAL = 2,\nSUCCESS = 3,\nFAILURE = 4,\n};\n</code></pre> <p><code>waiting_approved_modules</code>\u3068<code>already_approved_modules</code>\u306b\u5206\u985e\u3059\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:607:613@runRequestModules<pre><code>  std::for_each(executable_modules.begin(), executable_modules.end(), [&amp;](const auto &amp; m) {\nif (m-&gt;isWaitingApproval()) {\nwaiting_approved_modules.push_back(m);\n} else {\nalready_approved_modules.push_back(m);\n}\n});\n</code></pre> <p><code>already_approved_modules</code>\u306e\u4e2d\u3067\u306eselectHighestPriorityModule()\uff0c\u305d\u306e\u6b21\u306b<code>waiting_approved_modules</code>\u306e\u4e2d\u3067\u306eselectHighestPriorityModule()\u306e\u9806\u3067\u8fd4\u3059\uff0e</p> <p>updateCandidateModules()\u3057\u3066\u304b\u3089\u4e0a\u3067selectHighestPriorityModule()\u306e\u7d50\u679c\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u51fa\u529b\u3092\u30da\u30a2\u3067\u8fd4\u3059\uff0e</p>"},{"location":"planning/behavior_path_planner/#updatecandidatemodules","title":"updateCandidateModules","text":"<p>\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3067<code>$max_size == 1</code>\u3067\u3042\u308b\u305f\u3081\uff0c\u4e8b\u5b9f\u4e0a<code>candidate_module_ptrs_</code>\u3068<code>request_modules</code>\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u540d\u306b\u91cd\u8907\u306f\u306a\u3044\uff08\u5b9f\u88c5\u90fd\u5408\u3067\u4e21\u8005\u3067\u91cd\u8907\u306f\u3042\u308b\u304c\uff0c\u305d\u308c\u306fshared_ptr\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u3060\u3051\uff09\uff0e</p> <p>\u6ce8\u610f\u70b9</p> <p><code>highest_priority_module</code>\u304c<code>isWaitingApproval</code>\u3067\u306a\u3044\u5834\u5408\uff0c\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fcandidate\u3092\u7d4c\u305a\u306bapproved\u306b\u5165\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner/#_11","title":"\u526f\u4f5c\u7528","text":"<ul> <li><code>candidate_module_ptrs_</code>\u306e\u3044\u304f\u3064\u304b\u306e\u8981\u7d20\u304c\u6d88\u3048\u305f\u308a\u5897\u3048\u305f\u308a\u3059\u308b</li> <li><code>candidate_module_ptrs_</code>\u306f\u305d\u306e\u5f8csortByPriority()\u3055\u308c\u3066\u3044\u308b</li> </ul>"},{"location":"planning/behavior_path_planner/#_12","title":"\u51e6\u7406","text":"<ul> <li>\u524a\u9664<ul> <li><code>candidate_module_ptrs_</code>\u306e\u3046\u3061<code>request_modules</code>\u306b\u306a\u3044\u3082\u306e\u3092\u524a\u9664(\u524d\u56de\u306e\u30b5\u30a4\u30af\u30eb\u304b\u3089\u7acb\u3061\u4e0a\u304c\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u3063\u305f\u3082\u306e)</li> <li><code>candidate_module_ptrs_</code>\u306e\u3046\u3061<code>highest_priority_module</code>\u3068\u540c\u4e00\u3067\u3042\u308a\uff0c\u304b\u3064\u305d\u308c\u304c\u307e\u3060\uff08or \u3082\u306f\u3084\uff09isWaitingApproval()\u3067\u306f\u306a\u3044\u3082\u306e\u306f\u524a\u9664\uff08\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u5373\u5ea7\u306bapproved_module\u306b\u3059\u308b\u304b\u3089candidate_module\u304b\u3089\u6d88\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\uff09</li> </ul> </li> <li>\u8ffd\u52a0<ul> <li><code>request_modules</code>\u306e\u3046\u3061<code>candidate_module_ptrs_</code>\u306b\u306a\u3044\u3082\u306e\u3092\u8ffd\u52a0(\u4eca\u56de\u306e\u30b5\u30a4\u30af\u30eb\u3067\u65b0\u305f\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3082\u306e)<ul> <li>\u305f\u3060\u3057<code>request_modules</code>\u306e\u3046\u3061<code>highest_priority_module</code>\u3068\u540c\u4e00\u3067\u3042\u308a\uff0c\u304b\u3064\u305d\u308c\u304c\u307e\u3060\uff08or \u3082\u306f\u3084\uff09isWaitingApproval()\u3067\u306f\u306a\u3044\u3082\u306e\u306f\u30b9\u30ad\u30c3\u30d7\uff08\u3053\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u5373\u5ea7\u306bapproved_module\u306b\u3059\u308b\u304b\u3089candidate_module\u306b\u306f\u8ffd\u52a0\u3057\u306a\u3044\u305f\u3081\uff09</li> </ul> </li> </ul> </li> </ul> <p><code>highest_priority_module</code>\u304b\u3064not isWaitingApproval()\u3067\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306fcandidate\u3092\u7d4c\u305a\u306b\u76f4\u63a5<code>approved_module_ptrs_</code>\u306b\u5165\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\u305d\u306e\u305f\u3081\u65e2\u5b58\u306e<code>candidate_module_ptrs_</code>\u304b\u3089\u524a\u9664\u3057\uff0c\u8ffd\u52a0\u3082\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:855:870@runRequestModules<pre><code>    const auto candidate_to_remove = [&amp;](auto &amp; itr) {\nif (!exist(itr, request_modules)) {\ndeleteExpiredModules(itr);\nreturn true;\n}\nreturn itr-&gt;name() == highest_priority_module-&gt;name() &amp;&amp;\n!highest_priority_module-&gt;isWaitingApproval();\n};\n\ncandidate_module_ptrs_.erase(\nstd::remove_if(\ncandidate_module_ptrs_.begin(), candidate_module_ptrs_.end(), candidate_to_remove),\ncandidate_module_ptrs_.end());\n\nstd::for_each(\nmanager_ptrs_.begin(), manager_ptrs_.end(), [](const auto &amp; m) { m-&gt;updateObserver(); });\n</code></pre> behavior_path_planner/src/planner_manager.cpp:876:891@runRequestModules<pre><code>  for (const auto &amp; m : request_modules) {\nif (\nm-&gt;name() == highest_priority_module-&gt;name() &amp;&amp;\n!highest_priority_module-&gt;isWaitingApproval()) {\ncontinue;\n}\n\nif (!exist(m, candidate_module_ptrs_)) {\ncandidate_module_ptrs_.push_back(m);\n}\n}\n\n/**\n   * sort by priority. sorted_request_modules.front() is the highest priority module.\n   */\nsortByPriority(candidate_module_ptrs_);\n</code></pre> behavior_path_planner/src/planner_manager.cpp:170:178@runRequestModules<pre><code>      if (highest_priority_module-&gt;isWaitingApproval()) {\nprocessing_time_.at(\"total_time\") = stop_watch_.toc(\"total_time\", true);\nreturn output;\n}\n\n/**\n       * STEP7: if the candidate module is approved, push the module into approved_module_ptrs_\n       */\naddApprovedModule(highest_priority_module);\n</code></pre>"},{"location":"planning/behavior_path_planner/#runapprovedmodules","title":"runApprovedModules","text":"<p>\u6ce8\u610f\u70b9</p> <p>\u3053\u3053\u3067\u52d5\u3044\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306f<code>WAITING_APPROVAL</code>\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3060\u3051\u3067\uff0cRTC\u3067\u306f\u627f\u8a8d\u3055\u308c\u3066\u3044\u308b\u3068\u306f\u9650\u3089\u306a\u3044\uff0e\u3069\u3061\u3089\u304b\u3068\u3044\u3046\u3068manager\u304c\u3069\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306eRTC\u3092\u9001\u4fe1\u3059\u308b\u304b\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067RTC\u4ecb\u5165\u3092\u53ef\u80fd\u306b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u9078\u629e\u3057\u3066\u3044\u308b</p>"},{"location":"planning/behavior_path_planner/#_13","title":"\u526f\u4f5c\u7528","text":"<ul> <li>isWaitingApproval()\u306b\u623b\u3063\u305f<code>approved_module</code>\u304c\u3044\u305f\u5834\u5408\u305d\u306e\u5206<code>approved_module</code>\u304c1\u3064\u6e1b\u308a\uff0c<code>cadidate_module</code>\u306f\u305d\u308c1\u3064\u3060\u3051\u306b\u306a\u308b</li> <li>FAILURE\u3060\u3063\u305fapprove_module\u304c\u3044\u305f\u5834\u5408\uff0c\u305d\u308c\u4ee5\u964d\u306e<code>approved_modules</code>\u5168\u3066\u3068\u5168\u3066\u306e<code>candidate_modules</code>\u304c\u524a\u9664\u3055\u308c\u308b</li> <li>SUCCESS\u306e<code>approved_modules</code>\u3082\u5168\u3066\u524a\u9664\u3055\u308c\u308b</li> </ul>"},{"location":"planning/behavior_path_planner/#_14","title":"\u51e6\u7406","text":"<p>\u51fa\u529b\u306e\u521d\u671f\u5024\u306f\u4ee5\u4e0b\u3067\u3042\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:641:641<pre><code>  BehaviorModuleOutput output = getReferencePath(data);\n</code></pre> <p><code>approved_module_ptrs_</code>\u304c\u7a7a\u3067\u3042\u308c\u3070\u3053\u306e\u521d\u671f\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\uff0e</p> <p>\u305d\u3046\u3067\u306a\u3044\u5834\u5408\uff0c\u307e\u305a<code>approved_module_ptrs_</code>\u306e\u3046\u3061<code>is_keep_last</code>\u306e\u3082\u306e\u3092\u6607\u9806\u3067\u6700\u5f8c\u5c3e\u306b\u79fb\u3057(low -&gt; high)\uff0c<code>is_keep_last</code>\u3067\u306a\u3044\u3082\u306e\u3092bootstrap\u3067\u5b9f\u884c\u3057\u3066\u7d50\u679c\u3092\u4fdd\u6301\u3059\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:701:706<pre><code>  std::for_each(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), [&amp;](const auto &amp; m) {\nif (!getManager(m)-&gt;isKeepLast()) {\noutput = run(m, data, output);\nresults.emplace(m-&gt;name(), output);\n}\n});\n</code></pre> <p>\u6b21\u306b\uff0c<code>is_keep_last</code>\u3067\u306a\u3044\u3082\u306e\u306e\u3046\u3061isWaitingApproval()\u306b\u623b\u3063\u305f\u3082\u306e\u304c\u3044\u305f\u5834\u5408\uff0cclearCandidateModules()\u3057\u3066\u304b\u3089\u518d\u5ea6\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3060\u3051\u3092<code>candidate_module_ptrs_</code>\u306b\u623b\u3057\u3066<code>approve_module_ptrs_</code>\u304b\u3089\u306f\u524a\u9664\u3057\uff0c<code>results</code>\u304b\u3089\u306f\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u4ee5\u964d\u306e\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u7d50\u679c\u3092\u524a\u9664\u3059\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:730:740<pre><code>      clearCandidateModules();\ncandidate_module_ptrs_.push_back(*waiting_approval_modules_itr);\n\ndebug_info_.emplace_back(\n*waiting_approval_modules_itr, Action::MOVE, \"Back To Waiting Approval\");\n\nstd::for_each(\nwaiting_approval_modules_itr, approved_module_ptrs_.end(),\n[&amp;results](const auto &amp; m) { results.erase(m-&gt;name()); });\n\napproved_module_ptrs_.erase(waiting_approval_modules_itr);\n</code></pre> <p>\u6b21\u306b<code>FAILURE</code>\u3060\u3063\u305f\u3082\u306e\u304c\u3044\u305f\u5834\u5408\uff0c\u305d\u308c\u3068\u305d\u308c\u4ee5\u964d\u3092\u5168\u3066deleteExpiredModules()\u3057\uff0cclearCandidateModules()\u3057\uff0c\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u4ee5\u964d\u3092<code>approve_module_ptrs_</code>\u304b\u3089\u524a\u9664\u3059\u308b\uff0e</p> <p><code>result</code>\u306b\u7d50\u679c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3082\u306e\u304capproved\u304b\u3064valid\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b\u306e\u3067\uff0c<code>approved_module_ptrs_</code>\u3092\u9006\u5411\u304d\u306biterate\u3057\u3066<code>result</code>\u306b\u7d50\u679c\u304c\u6b8b\u3063\u3066\u3044\u308b\u3082\u306e\u3092\u898b\u3064\u3051\u305f\u3089\u305d\u308c\u3092\u6c42\u3081\u308b\uff0e</p> <p><code>SUCCESS</code>\u306e\u3082\u306e\u3092<code>approved_module_ptrs_</code>\u306e\u5f8c\u5c3e\u306b\u79fb\u3059\uff0e</p> behavior_path_planner/src/planner_manager.cpp:793:815<pre><code>    const auto move_to_end = [](auto &amp; modules, const auto &amp; cond) {\nauto itr = modules.begin();\nwhile (itr != modules.end()) {\nconst auto satisfied_exit_cond =\nstd::all_of(itr, modules.end(), [&amp;cond](const auto &amp; m) { return cond(m); });\n\nif (satisfied_exit_cond) {\nreturn;\n}\n\nif (cond(*itr)) {\nauto tmp = std::move(*itr);\nitr = modules.erase(itr);\nmodules.insert(modules.end(), std::move(tmp));\n} else {\nitr++;\n}\n}\n};\nconst auto success_module_cond = [](const auto &amp; m) {\nreturn m-&gt;getCurrentStatus() == ModuleStatus::SUCCESS;\n};\nmove_to_end(approved_module_ptrs_, success_module_cond);\n</code></pre> <p>success\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u672b\u5c3e\u306b\u63c3\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3089\u3092<code>approved_module_ptrs_</code>\u304b\u3089\u524a\u9664\u3059\u308b.</p> behavior_path_planner/src/planner_manager.cpp:817:834<pre><code>    const auto itr =\nstd::find_if(approved_module_ptrs_.begin(), approved_module_ptrs_.end(), success_module_cond);\n\nif (std::any_of(itr, approved_module_ptrs_.end(), [](const auto &amp; m) {\nreturn m-&gt;isCurrentRouteLaneletToBeReset();\n}))\nresetCurrentRouteLanelet(data);\n\nstd::for_each(itr, approved_module_ptrs_.end(), [&amp;](auto &amp; m) {\ndebug_info_.emplace_back(m, Action::DELETE, \"From Approved\");\ndeleteExpiredModules(m);\n});\n\napproved_module_ptrs_.erase(itr, approved_module_ptrs_.end());\n\nstd::for_each(\nmanager_ptrs_.begin(), manager_ptrs_.end(), [](const auto &amp; m) { m-&gt;updateObserver(); });\n}\n</code></pre> <p>\u6ce8\u610f</p> <p>succcess\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u524a\u9664\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\uff0c\u3053\u3053\u3067\u3042\u3048\u3066\u672b\u5c3e\u306b\u63c3\u3048\u3066\u304b\u3089\u524a\u9664\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\uff0e</p>"},{"location":"planning/behavior_path_planner/#run","title":"run()","text":"<p>\u4ee5\u4e0b\u3092loop\u3059\u308b</p> <ul> <li><code>approved_modules_output = runApprovedModules()</code><ul> <li><code>output = getReferencePath()</code>\u3092\u521d\u671f\u5024\u3068\u3059\u308b</li> <li><code>approved_modules_</code>\u304c\u7a7a\u3067\u3042\u308c\u3070\u305d\u308c\u3092\u305d\u306e\u307e\u307eoutput\u3092\u8fd4\u3057\u3066break</li> </ul> </li> <li><code>approved_modules_output</code>\u306e\u7d4c\u8def\u3092\u5143\u306b<code>request_modules = getRequestModules()</code>\u3092\u6c42\u3081\u308b</li> <li><code>request_modules</code>\u304c\u306a\u3051\u308c\u3070<code>runKeepLastModules(approved_modules_output)</code>\u3092\u8fd4\u3057\u3066break</li> <li><code>request_modules</code>\u304c\u3042\u308c\u3070<code>[highest_priority_module, candidate_modules_output] = runRequestModules(request_modules, approved_modules_output)</code>\u3092\u6c42\u3081\u308b\uff0e</li> <li>\u3082\u3057<code>highest_priority_module</code>\u304cnull\u306a\u3089\u3070<code>runKeepLastModules(approved_modules_output)</code>\u3092\u8fd4\u3057\u3066break</li> <li>\u3082\u3057<code>highest_priority_module-&gt;isWaitingApproval()</code>\u306a\u3089\u3070<code>runKeepLastModules(candidate_modules_output)</code>\u3092\u8fd4\u3057\u3066break</li> <li>\u3082\u3057<code>highest_priority_module</code>\u304c\u627f\u8a8d\u3055\u308c\u3066\u3044\u305f\u3089<code>approved_module_ptrs_</code>\u306b\u8ffd\u52a0</li> <li>\u4e00\u756a\u4e0a\u306b\u623b\u308b</li> </ul> <p>candidate\u304capprove\u3055\u308c\u308b\u3068approved modules\u306e\u4e00\u756a\u6700\u5f8c\u306b\u5165\u308b</p> behavior_path_planner/include/behavior_path_planner/planner_manager.hpp:344:351<pre><code>  /**\n   * @brief push back to approved_module_ptrs_.\n   * @param approved module pointer.\n   */\nvoid addApprovedModule(const SceneModulePtr &amp; module_ptr)\n{\napproved_module_ptrs_.push_back(module_ptr);\n}\n</code></pre>"},{"location":"planning/behavior_path_planner_common/","title":"behavior_path_planner_common","text":""},{"location":"planning/behavior_path_planner_common/#behavior_path_planner_common","title":"behavior_path_planner_common","text":"<p>SceneModuleManagerInterface\u306fidle\u72b6\u614b\u306eSceneModuleInterface\u3092\u751f\u6210\u3057\u305f\u308a\uff0ccandidate/approved \u306b\u6607\u683c\u3057\u3066RUNNING\u72b6\u614b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092weak_ptr\u3068\u3057\u3066\u9593\u63a5\u7684\u306b\u7ba1\u7406\u3059\u308b\u5f79\u5272\u3092\u6301\u3064\uff0e</p> <ul> <li>PlannerManager\u304c<code>manager_ptrs_</code>\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u304c\uff0cSceneModuleManagerInterface\u306eshared_ptr</li> <li>PlannerManager\u304c<code>approved_module_ptrs_</code>\u306a\u3069\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u304c\uff0cSceneModuleInterface\u306eshared_ptr</li> </ul>"},{"location":"planning/behavior_path_planner_common/#_1","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb","text":"<p>\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306e\u5834\u5408\u306fGoalPlanner\u3092\u4f8b\u306b\u7528\u3044\u308b\uff0e</p>"},{"location":"planning/behavior_path_planner_common/#idle","title":"IDLE\u72b6\u614b","text":"<p>\u307e\u305aBehaviorPathPlannerNode\u3067<code>$launch_modules</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u5ba3\u8a00\u3055\u308c\u305fmanager\u304cload\u3055\u308c\u308b\uff0e</p> tier4_planning_launch/launch/~/behavior_planning.launch.xml:42:46<pre><code>  &lt;arg name=\"behavior_path_planner_launch_modules\" default=\"[\"/&gt;\n&lt;let\nname=\"behavior_path_planner_launch_modules\"\nvalue=\"$(eval &amp;quot;'$(var behavior_path_planner_launch_modules)' + 'behavior_path_planner::AvoidanceModuleManager, '&amp;quot;)\"\nif=\"$(var launch_avoidance_module)\"\n</code></pre> tier4_planning_launch/launch/~/behavior_planning.launch.xml:94:98<pre><code>    name=\"behavior_path_planner_launch_modules\"\n    value=\"$(eval &amp;quot;'$(var behavior_path_planner_launch_modules)' + 'behavior_path_planner::AvoidanceByLaneChangeModuleManager, '&amp;quot;)\"\n    if=\"$(var launch_avoidance_by_lane_change_module)\"\n  /&gt;\n  &lt;let name=\"behavior_path_planner_launch_modules\" value=\"$(eval &amp;quot;'$(var behavior_path_planner_launch_modules)' + '$(var launch_module_list_end)'&amp;quot;)\"/&gt;\n</code></pre> tier4_planning_launch/launch/~/behavior_planning.launch.xml:205:205<pre><code>      &lt;param name=\"launch_modules\" value=\"$(var behavior_path_planner_launch_modules)\"/&gt;\n</code></pre> behavior_path_planner/src/behavior_path_planner_node.cpp:138:144@BehaviorPathPlannerNode()<pre><code>    for (const auto &amp; name : declare_parameter&lt;std::vector&lt;std::string&gt;&gt;(\"launch_modules\")) {\n// workaround: Since ROS 2 can't get empty list, launcher set [''] on the parameter.\nif (name == \"\") {\nbreak;\n}\nplanner_manager_-&gt;launchScenePlugin(*this, name);\n}\n</code></pre> <p>\u305d\u306e\u969b\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eSceneModuleManagerInterface::init()\u304c\u547c\u3070\u308c\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:44:65<pre><code>void PlannerManager::launchScenePlugin(rclcpp::Node &amp; node, const std::string &amp; name)\n{\nif (plugin_loader_.isClassAvailable(name)) {\nconst auto plugin = plugin_loader_.createSharedInstance(name);\nplugin-&gt;init(&amp;node);\n\n// Check if the plugin is already registered.\nfor (const auto &amp; running_plugin : manager_ptrs_) {\nif (plugin-&gt;name() == running_plugin-&gt;name()) {\nRCLCPP_WARN_STREAM(node.get_logger(), \"The plugin '\" &lt;&lt; name &lt;&lt; \"' is already loaded.\");\nreturn;\n}\n}\n\n// register\nmanager_ptrs_.push_back(plugin);\nprocessing_time_.emplace(plugin-&gt;name(), 0.0);\nRCLCPP_DEBUG_STREAM(node.get_logger(), \"The scene plugin '\" &lt;&lt; name &lt;&lt; \"' is loaded.\");\n} else {\nRCLCPP_ERROR_STREAM(node.get_logger(), \"The scene plugin '\" &lt;&lt; name &lt;&lt; \"' is not available.\");\n}\n}\n</code></pre> behavior_path_planner_common/scene_module_manager_interface.hpp:58:58<pre><code>  virtual void init(rclcpp::Node * node) = 0;\n</code></pre> <p>SceneModuleManagerInterface::initInterface()\u3082\u5404\u5b9f\u88c5\u306b\u304a\u3044\u3066\u5148\u982d\u3067\u547c\u3070\u308c\u3066\u3044\u308b\uff0e\u305d\u306e\u4ed6\u306b\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u521d\u671f\u5316\u304c\u884c\u308f\u308c\u3066\u3044\u308b\uff0e</p> behavior_path_goal_planner_module/src/manager.cpp:28:38<pre><code>void GoalPlannerModuleManager::init(rclcpp::Node * node)\n{\n// init manager interface\ninitInterface(node, {\"\"});\n\nGoalPlannerParameters p;\n\nconst std::string base_ns = \"goal_planner.\";\n// general params\n{\np.th_stopped_velocity = node-&gt;declare_parameter&lt;double&gt;(base_ns + \"th_stopped_velocity\");\n</code></pre> <p>SceneModuleManagerInterface::initInterface()\u306fRTC\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u512a\u5148\u5ea6\u30fb\u5171\u901a\u306e\u30c7\u30d0\u30c3\u30b0\u30de\u30fc\u30ab\u30fc\u306e\u8a2d\u5b9a\u304c\u884c\u308f\u308c\u3066\u3044\u308b\uff0e</p> behavior_path_planner_common/scene_module_manager_interface.hpp:264:305<pre><code>  void initInterface(rclcpp::Node * node, const std::vector&lt;std::string&gt; &amp; rtc_types)\n{\nusing tier4_autoware_utils::getOrDeclareParameter;\n\n// init manager configuration\n{\nstd::string ns = name_ + \".\";\ntry {\nconfig_.enable_rtc = getOrDeclareParameter&lt;bool&gt;(*node, \"enable_all_modules_auto_mode\")\n? false\n: getOrDeclareParameter&lt;bool&gt;(*node, ns + \"enable_rtc\");\n} catch (const std::exception &amp; e) {\nconfig_.enable_rtc = getOrDeclareParameter&lt;bool&gt;(*node, ns + \"enable_rtc\");\n}\n\nconfig_.enable_simultaneous_execution_as_approved_module =\ngetOrDeclareParameter&lt;bool&gt;(*node, ns + \"enable_simultaneous_execution_as_approved_module\");\nconfig_.enable_simultaneous_execution_as_candidate_module = getOrDeclareParameter&lt;bool&gt;(\n*node, ns + \"enable_simultaneous_execution_as_candidate_module\");\nconfig_.keep_last = getOrDeclareParameter&lt;bool&gt;(*node, ns + \"keep_last\");\nconfig_.priority = getOrDeclareParameter&lt;int&gt;(*node, ns + \"priority\");\nconfig_.max_module_size = getOrDeclareParameter&lt;int&gt;(*node, ns + \"max_module_size\");\n}\n\n// init rtc configuration\nfor (const auto &amp; rtc_type : rtc_types) {\nconst auto snake_case_name = utils::convertToSnakeCase(name_);\nconst auto rtc_interface_name =\nrtc_type.empty() ? snake_case_name : snake_case_name + \"_\" + rtc_type;\nrtc_interface_ptr_map_.emplace(\nrtc_type, std::make_shared&lt;RTCInterface&gt;(node, rtc_interface_name, config_.enable_rtc));\nobjects_of_interest_marker_interface_ptr_map_.emplace(\nrtc_type, std::make_shared&lt;ObjectsOfInterestMarkerInterface&gt;(node, rtc_interface_name));\n}\n\n// init publisher\n{\npub_info_marker_ = node-&gt;create_publisher&lt;MarkerArray&gt;(\"~/info/\" + name_, 20);\npub_debug_marker_ = node-&gt;create_publisher&lt;MarkerArray&gt;(\"~/debug/\" + name_, 20);\npub_virtual_wall_ = node-&gt;create_publisher&lt;MarkerArray&gt;(\"~/virtual_wall/\" + name_, 20);\npub_drivable_lanes_ = node-&gt;create_publisher&lt;MarkerArray&gt;(\"~/drivable_lanes/\" + name_, 20);\n}\n</code></pre> <p><code>rtc_type</code>\u306f\u307b\u3068\u3093\u3069\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306f\u7a7a\u3060\u304c\uff0clane_change\u306e\u307f<code>{rtc_type: \"left\", snake_case_name: \"lane_change_left\"}</code>\u3068\u3044\u3046\u5177\u5408\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308b\uff0e</p> <p>BehaviorPathPlanner\u3067\u306f\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u3067\u81ea\u5206\u81ea\u8eab\u304c\u7acb\u3061\u4e0a\u304c\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:324:339@getRequestModule<pre><code>      const auto name = manager_ptr-&gt;name();\nconst auto find_same_name_module = [&amp;name](const auto &amp; m) { return m-&gt;name() == name; };\nconst auto itr = std::find_if(\ncandidate_module_ptrs_.begin(), candidate_module_ptrs_.end(), find_same_name_module);\n\nif (itr == candidate_module_ptrs_.end()) {\nif (manager_ptr-&gt;canLaunchNewModule()) {\nmanager_ptr-&gt;updateIdleModuleInstance();\nif (manager_ptr-&gt;isExecutionRequested(previous_module_output)) {\nrequest_modules.emplace_back(manager_ptr-&gt;getIdleModule());\n}\n}\n\ntoc(manager_ptr-&gt;name());\ncontinue;\n}\n</code></pre> <p>\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306fhot-start\u3067\u304d\u308b\u3088\u3046\uff0c isExecutionRequested \u3067\u306a\u304f\u3066\u3082\u6bce\u56dePlannerManager::getRequestModule()\u3067<code>idle_module_ptr_</code>\u3092SceneModuleManagerInterface::updateIdleModuleInstance()\u3067\u66f4\u65b0\u3057\u3066\u3044\u308b\uff0e\u305d\u3057\u3066 isExecutionRequested \u306b\u306a\u3063\u305f\u3089SceneModuleManagerInterface::getIdleModule()\u3067<code>idle_module_ptr_</code>\u306e\u6240\u6709\u6a29\u3092\u79fb\u3057\u3066\u3044\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:329:336@getRequestModule<pre><code>      if (itr == candidate_module_ptrs_.end()) {\nif (manager_ptr-&gt;canLaunchNewModule()) {\nmanager_ptr-&gt;updateIdleModuleInstance();\nif (manager_ptr-&gt;isExecutionRequested(previous_module_output)) {\nrequest_modules.emplace_back(manager_ptr-&gt;getIdleModule());\n}\n}\n</code></pre> <p>\u6ce8\u610f\u70b9</p> <p>SceneModuleManagerInterface::getIdleModule()\u306f\u81ea\u8eab\u306e\u30e1\u30f3\u30d0\u30fc\u306e<code>idle_module_ptr_</code>\u3092move\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u540d\u524d\u306b\u53cd\u3057\u3066\u975econst\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b</p> behavior_path_planner_common/include/scene_module_manager_interface.hpp:259:259<pre><code>  std::shared_ptr&lt;SceneModuleInterface&gt; getIdleModule() { return std::move(idle_module_ptr_); }\n</code></pre> <p>SceneModuleManagerInterface::updateIdleModuleInstance()\u3067\u306f<code>idle_module_ptr_</code>\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\uff08\u521d\u56de\uff0c\u307e\u305f\u306f\u524d\u30b5\u30a4\u30af\u30eb\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u304c isExecutionReady \u306b\u6607\u683c\u3057\u305f\u5834\u5408\uff09\u307e\u305f\u306f\u65e2\u5b58\u306e<code>idle_module_ptr_</code>\u306e\u66f4\u65b0\u3092\u884c\u3046\uff0e</p> behavior_path_planner_common/include/scene_module_manager_interface.hpp:60:68<pre><code>  void updateIdleModuleInstance()\n{\nif (idle_module_ptr_) {\nidle_module_ptr_-&gt;onEntry();\nreturn;\n}\n\nidle_module_ptr_ = createNewSceneModuleInstance();\n}\n</code></pre> behavior_path_planner_common/include/scene_module_interface.hpp:171:177<pre><code>  void onEntry()\n{\nRCLCPP_DEBUG(getLogger(), \"%s %s\", name_.c_str(), __func__);\n\nstop_reason_ = StopReason();\n\nprocessOnEntry();\n</code></pre> <p>SceneModuleInterface::processOnEntry()\u306f\u3044\u304f\u3064\u304b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u306foverride\u3055\u308c\u3066\u3044\u308b\uff0e</p> behavior_path_start_planner_module/src/start_planner_module.cpp:161:163<pre><code>void StartPlannerModule::processOnEntry()\n{\ninitVariables();\n</code></pre> <p>SceneModuleInterface::createNewSceneModuleInstance()\u306f\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3067\uff0c\u5404\u30b5\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5171\u5909\u5024\u3068\u3057\u3066\u81ea\u8eab\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u8fd4\u3059\uff0e</p> behavior_path_goal_planner_module/include/manager.hpp:37:42<pre><code>  std::unique_ptr&lt;SceneModuleInterface&gt; createNewSceneModuleInstance() override\n{\nreturn std::make_unique&lt;GoalPlannerModule&gt;(\nname_, *node_, parameters_, rtc_interface_ptr_map_,\nobjects_of_interest_marker_interface_ptr_map_);\n}\n</code></pre> <p>RUNNING\u3067\u304d\u308bSceneModule\u306e\u500b\u6570\u306b\u306f\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u5236\u9650\u304c\u3042\u308a\uff0c\u305d\u308c\u3089\u3092SceneModuleManagerInterface::observers_\u3068\u3057\u3066\u7ba1\u7406\u3057\u3066\u3044\u308b\uff0e</p> behavior_path_planner_common/interface/scene_module_manager_interface.hpp:198:199<pre><code>  bool canLaunchNewModule() const { return observers_.size() &lt; config_.max_module_size; }\n</code></pre>"},{"location":"planning/behavior_path_planner_common/#idleobserver","title":"IDLE\u304b\u3089\u306e\u6607\u683c\u4ee5\u964d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u6570\u3068observer","text":"<p>observer \u306f\u751f\u6210\u3057\u305f<code>idle_module_ptr_</code>\u3067\u5916\u90e8\u306b\u4fdd\u6709\u3055\u308c\u3066\u3044\u308b\u500b\u6570\u3092\u7ba1\u7406\u3057\u3066\u304a\u308a\uff0cPlannerManager::runRequestModules()\uff08PlannerManager::getRequestModules()\u3067\u6c42\u3081\u305f\u3082\u306e\u304b\u3089\u6b21\u306e candidate \u3092\u6c42\u3081\u308b\u95a2\u6570\uff09\u3067executable\u306b\u306a\u3063\u305f<code>idle_module_ptr_</code>\u304cSceneModuleManagerInterface::registerNewModule()\u3067 observer \u3068\u3057\u3066\u767b\u9332\u3055\u308c\u308b\uff0e</p> behavior_path_planner/src/planner_manager.cpp:559:568@runRequestModules<pre><code>  for (const auto &amp; module_ptr : executable_modules) {\nconst auto &amp; manager_ptr = getManager(module_ptr);\n\nif (!manager_ptr-&gt;exist(module_ptr)) {\nmanager_ptr-&gt;registerNewModule(\nstd::weak_ptr&lt;SceneModuleInterface&gt;(module_ptr), previous_module_output);\n}\n\nresults.emplace(module_ptr-&gt;name(), run(module_ptr, data, previous_module_output));\n}\n</code></pre> behavior_path_planner_common/interface/scene_module_manager_interface.hpp:79:91<pre><code>  void registerNewModule(\nconst SceneModuleObserver &amp; observer, const BehaviorModuleOutput &amp; previous_module_output)\n{\nif (observer.expired()) {\nreturn;\n}\n\nobserver.lock()-&gt;setData(planner_data_);\nobserver.lock()-&gt;setPreviousModuleOutput(previous_module_output);\nobserver.lock()-&gt;onEntry();\n\nobservers_.push_back(observer);\n}\n</code></pre> <p>\u307e\u305f\u305d\u306e\u3046\u3061 candidate/approved \u3068\u3057\u3066\u306e\u8a08\u7b97\u3067\u3059\u3067\u306b FAILURE / SUCCESS \u3067\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306f expired module \u3068\u3057\u3066 observer \u304b\u3089\u3082\u524a\u9664\u3059\u308b\uff0e</p> planning/behavior_path_planner/src/planner_manager.cpp:574:593@runRequestModules<pre><code>    const auto remove_expired_modules = [this](auto &amp; m) {\nif (m-&gt;getCurrentStatus() == ModuleStatus::FAILURE) {\ndeleteExpiredModules(m);\nreturn true;\n}\n\nif (m-&gt;getCurrentStatus() == ModuleStatus::SUCCESS) {\ndeleteExpiredModules(m);\nreturn true;\n}\n\nreturn false;\n};\n\nexecutable_modules.erase(\nstd::remove_if(executable_modules.begin(), executable_modules.end(), remove_expired_modules),\nexecutable_modules.end());\n\nstd::for_each(\nmanager_ptrs_.begin(), manager_ptrs_.end(), [](const auto &amp; m) { m-&gt;updateObserver(); });\n</code></pre> planning/behavior_path_planner/src/planner_manager.cpp:751:768@runApprovedModules<pre><code>    const auto itr = std::find_if(\napproved_module_ptrs_.begin(), approved_module_ptrs_.end(),\n[](const auto &amp; m) { return m-&gt;getCurrentStatus() == ModuleStatus::FAILURE; });\n\nstd::for_each(itr, approved_module_ptrs_.end(), [this](auto &amp; m) {\ndebug_info_.emplace_back(m, Action::DELETE, \"From Approved\");\ndeleteExpiredModules(m);\n});\n\nstd::for_each(\nmanager_ptrs_.begin(), manager_ptrs_.end(), [](const auto &amp; m) { m-&gt;updateObserver(); });\n\nif (itr != approved_module_ptrs_.end()) {\nclearCandidateModules();\n}\n\napproved_module_ptrs_.erase(itr, approved_module_ptrs_.end());\n}\n</code></pre>"},{"location":"planning/behavior_path_planner_common/#rtciswaitingapproval","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u72b6\u614b\u9077\u79fb\u3068RTC\u306b\u3088\u308b\u627f\u8a8d\u30fbisWaitingApproval\u306b\u3064\u3044\u3066","text":""},{"location":"planning/behavior_path_planner_common/#idlerunning","title":"IDLE\u304b\u3089RUNNING","text":"<p>getRequestModules\u3067\u751f\u6210\u3055\u308c\u305f<code>module_ptr</code>\u306fIDLE\u72b6\u614b\u3067\u3042\u308a\uff0crunRequestModules\u3067private\u306e\u65b9\u306ePlannerManager::run\u5185\u3067updateCurrentStatus\u3092\u547c\u3070\u308c\u308b\u3053\u3068\u3067<code>RUNNING</code>\u72b6\u614b\u306b\u6620\u308b\uff0e</p> behavior_path_planner_common/scene_module_interface.hpp:444:444<pre><code>  ModuleStatus current_state_{ModuleStatus::IDLE};\n</code></pre> planning/behavior_path_planner/src/planner_manager.cpp:567:567@runRequestModules<pre><code>    results.emplace(module_ptr-&gt;name(), run(module_ptr, data, previous_module_output));\n</code></pre> behavior_path_planner/include/behavior_path_planner/planner_manager.hpp:276:291<pre><code>  BehaviorModuleOutput run(\nconst SceneModulePtr &amp; module_ptr, const std::shared_ptr&lt;PlannerData&gt; &amp; planner_data,\nconst BehaviorModuleOutput &amp; previous_module_output) const\n{\nstop_watch_.tic(module_ptr-&gt;name());\n\nmodule_ptr-&gt;setData(planner_data);\nmodule_ptr-&gt;setPreviousModuleOutput(previous_module_output);\n\nmodule_ptr-&gt;lockRTCCommand();\nconst auto result = module_ptr-&gt;run();\nmodule_ptr-&gt;unlockRTCCommand();\n\nmodule_ptr-&gt;postProcess();\n\nmodule_ptr-&gt;updateCurrentState();\n</code></pre> <p>SceneModuleInterface::updateCurrentStatus\uff0cSceneModuleInterface::updateState \uff0cSceneModuleInterface::setInitState\u3092\u8ffd\u3046\u3068\u5206\u304b\u308b\u3088\u3046\u306b\uff0c<code>IDLE</code>\u72b6\u614b\u3067\u3053\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u3068\u5fc5\u305a<code>RUNNING</code>\u306b\u9077\u79fb\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e todo: start_planner\u306fisWaitingApproval\u306b\u306a\u3063\u3066\u3044\u305d\u3046</p> behavior_path_planner_common/scene_module_interface.hpp:156:164<pre><code>  void updateCurrentState()\n{\nconst auto print = [this](const auto &amp; from, const auto &amp; to) {\nRCLCPP_DEBUG(\ngetLogger(), \"[%s] Transit from %s to %s.\", name_.c_str(), from.data(), to.data());\n};\n\nconst auto &amp; from = current_state_;\ncurrent_state_ = updateState();\n</code></pre> behavior_path_planner_common/scene_module_interface.hpp:376:386<pre><code>  ModuleStatus updateState()\n{\nauto log_debug_throttled = [&amp;](std::string_view message) -&gt; void {\nRCLCPP_DEBUG(getLogger(), \"%s\", message.data());\n};\nif (current_state_ == ModuleStatus::IDLE) {\nauto init_state = setInitState();\nRCLCPP_DEBUG(\ngetLogger(), \"transiting from IDLE to %s\", magic_enum::enum_name(init_state).data());\nreturn init_state;\n</code></pre> behavior_path_planner_common/scene_module_interface.hpp:468:468<pre><code>  virtual ModuleStatus setInitState() const { return ModuleStatus::RUNNING; }\n</code></pre> <p>todo: \u57fa\u672c\u7684\u306bupdateRTCStatus()\u306fmanager\u304b\u3089\u306f\u547c\u3070\u308c\u306a\u3044\u306e\u3067RTC\u3092\u4f7f\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u81ea\u767a\u7684\u306b\u547c\u3076\u5fc5\u8981\u304c\u3042\u308b\uff0e todo: rtc_interface_map_ptr\u304c\u7a7a\u3060\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f<code>isActivated() = true</code>\u306b\u306a\u308b\u3063\u307d\u3044</p>"},{"location":"planning/behavior_velocity_traffic_light_module/","title":"behavior_velocity_traffic_light_module","text":""},{"location":"planning/behavior_velocity_traffic_light_module/#behavior_velocity_traffic_light_module","title":"behavior_velocity_traffic_light_module","text":""},{"location":"planning/behavior_velocity_traffic_light_module/#_1","title":"\u8d77\u52d5\u6761\u4ef6","text":"<p>behavior_path_planner\u304b\u3089\u306e\u51fa\u529b\u306e\u7d4c\u8def\u4e0a\u306bTrafficLight\u304c\u7d10\u4ed8\u3051\u3089\u308c\u305f\u30ec\u30fc\u30f3\u304c\u5b58\u5728\u3057\u305f\u3089\u305d\u306e\u30ec\u30fc\u30f3\u306e\u6570\u3060\u3051traffic_light\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u7acb\u3061\u4e0a\u304c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/manager.cpp:115:118@launchNewModules<pre><code>  for (const auto &amp; traffic_light_reg_elem : planning_utils::getRegElemMapOnPath&lt;TrafficLight&gt;(\npath, planner_data_-&gt;route_handler_-&gt;getLaneletMapPtr(),\nplanner_data_-&gt;current_odometry-&gt;pose)) {\nconst auto stop_line = traffic_light_reg_elem.first-&gt;stopLine();\n</code></pre> <p>lanelet\u306bTrafficLight\u306eRegulatoryElement\u304c\u7d10\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308c\u3070\u305d\u308c\u3089\u3092\u53d6\u5f97\u3057\u3066\uff0c\u305d\u306elanelet\u306eID\u3092\u30ad\u30fc\u3068\u3057\u3066\uff08<code>const auto lane_id = module_id = traffic_light_reg_elem.second.id()</code>\uff09\u4fe1\u53f7RegulatoryElement\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u5f53\u8a72lanelet\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6e21\u3057\u3066traffic_light\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/manager.cpp:128:137@launchNewModules<pre><code>    const auto lane_id = traffic_light_reg_elem.second.id();\nconst auto module_id = lane_id;\nif (!isModuleRegisteredFromExistingAssociatedModule(module_id)) {\nregisterModule(std::make_shared&lt;TrafficLightModule&gt;(\nmodule_id, lane_id, *(traffic_light_reg_elem.first), traffic_light_reg_elem.second,\nplanner_param_, logger_.get_child(\"traffic_light_module\"), clock_));\ngenerateUUID(module_id);\nupdateRTCStatus(\ngetUUID(module_id), true, std::numeric_limits&lt;double&gt;::lowest(), path.header.stamp);\n}\n</code></pre> <p>\u6ce8\u610f\u70b9</p> <p><code>planning_utils::getRegElemMapOnPath&lt;TrafficLight&gt;</code>\u306e\u8fd4\u308a\u5024\u306f<code>{TrafficLight: Lanelet}</code>\u306e\u5f62\u5f0f\u306e\u8f9e\u66f8\u3067\u3042\u308b</p> <p>\u6bce\u30b5\u30a4\u30af\u30eb\u306e\u66f4\u65b0\u306b\u304a\u3044\u3066\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u78ba\u8a8d\u3055\u308c\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/manager.cpp:175:191@isModuleRegisteredFromExistingAssociatedModule<pre><code>bool TrafficLightModuleManager::isModuleRegisteredFromExistingAssociatedModule(\nconst lanelet::Id &amp; id) const\n{\nconst auto lane = planner_data_-&gt;route_handler_-&gt;getLaneletMapPtr()-&gt;laneletLayer.get(id);\n\nfor (const auto &amp; registered_id : registered_module_id_set_) {\nconst auto registered_lane =\nplanner_data_-&gt;route_handler_-&gt;getLaneletMapPtr()-&gt;laneletLayer.get(registered_id);\nfor (const auto &amp; registered_element : registered_lane.regulatoryElementsAs&lt;TrafficLight&gt;()) {\nfor (const auto &amp; element : lane.regulatoryElementsAs&lt;TrafficLight&gt;()) {\nif (hasSameTrafficLight(element, registered_element)) {\nreturn true;\n}\n}\n}\n}\nreturn false;\n</code></pre> <p>Path\u4e0a\u306elanelet IDs\u3068\u73fe\u5728\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30ebID\u3092\u6bd4\u8f03\u3057\uff0c\u52d5\u4f5c\u3055\u305b\u308b\u5fc5\u8981\u306e\u306a\u3044\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7834\u68c4\u3057\u3066\u3044\u308b\uff0e</p>"},{"location":"planning/behavior_velocity_traffic_light_module/#_2","title":"\u4fe1\u53f7\u8272\u306e\u6271\u3044","text":"<p><code>isStopSignal()</code>\u3067\u4fe1\u53f7\u8272\u306e\u66f4\u65b0\u3068\u9032\u884c\u3057\u3066\u3088\u3044\u304b\u3069\u3046\u304b\u304c\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:280:282<pre><code>bool TrafficLightModule::isStopSignal()\n{\nupdateTrafficSignal();\n</code></pre> behavior_velocity_traffic_light_module/src/scene.cpp:305:318<pre><code>void TrafficLightModule::updateTrafficSignal()\n{\nTrafficSignalStamped signal;\nif (!findValidTrafficSignal(signal)) {\n// Don't stop if it never receives traffic light topic.\nreturn;\n}\n\ntraffic_signal_stamp_ = signal.stamp;\n\n// Found signal associated with the lanelet\nlooking_tl_state_ = signal.signal;\nreturn;\n}\n</code></pre> <p><code>updateTrafficSignal()</code>\u306f\u5bfe\u5fdc\u3059\u308b\u4fe1\u53f7\u306e\u60c5\u5831\u304c\u73fe\u5728\u5f97\u3089\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057(findValidTrafficSignal())\uff0c\u30e1\u30f3\u30d0\u5909\u6570\u306e<code>traffic_signal_stamp_</code>\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3059\u308b\uff0e\u5024\u304c\u5f97\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f<code>traffic_signal_stamp_</code>\u3068<code>looking_tl_state_</code>\u306f\u305d\u306e\u307e\u307e\u66f4\u65b0\u3055\u308c\u306a\u3044\uff0e</p> <p>\u5bfe\u5fdc\u3059\u308b\u4fe1\u53f7\u306e\u60c5\u5831\u304c\u305d\u3082\u305d\u3082\u5f97\u3089\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306fsim/real\u3067\u6319\u52d5\u304c\u7570\u306a\u3063\u3066\u304a\u308a\uff0cPsim\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u306f\u3044\u3061\u3044\u3061\u4fe1\u53f7\u306e\u8272\u3092\u8a2d\u5b9a\u305b\u305a\u3068\u3082ego\u306b\u8d70\u3063\u3066\u307b\u3057\u3044\u306e\u3067\u305d\u306e\u5834\u5408\u306fGO\u3057\uff0c\u5b9f\u8eca\u3067\u306ffail-safe\u306b\u3059\u308b\u305f\u3081\u306bSTOP\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:289:293@isStopSignal<pre><code>  if (!traffic_signal_stamp_) {\nif (planner_data_-&gt;is_simulation) {\nreturn false;\n}\nreturn true;\n</code></pre> <p>\u3082\u3057\u60c5\u5831\u304c\u53e4\u304f\u306a\u3063\u305f\u3089\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406\u306b\u3088\u308a\u505c\u6b62\u3059\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:297:299@isStopSignal<pre><code>  if (isTrafficSignalTimedOut()) {\nreturn true;\n}\n</code></pre> <p><code>traffic_light_utils::isTrafficSignalStop()</code>\u306f\u30d0\u30eb\u30d6\u306e\u8272\u304c\u9ec4/\u8d64\u304b\u3064\u4ea4\u5dee\u70b9\u306b\u304a\u3044\u3066\u5bfe\u5fdc\u3059\u308b\u77e2\u5370\u4fe1\u53f7\u304c\u70b9\u706f\u3057\u3066\u3044\u306a\u3051\u308c\u3070<code>true</code>\u3059\u306a\u308f\u3061STOP\u3092\u8fd4\u3059\uff0e</p> traffic_light_utils/src/traffic_light_utils.cpp:80:108<pre><code>  if (hasTrafficLightCircleColor(\ntl_state, autoware_perception_msgs::msg::TrafficSignalElement::GREEN)) {\nreturn false;\n}\n\nconst std::string turn_direction = lanelet.attributeOr(\"turn_direction\", \"else\");\n\nif (turn_direction == \"else\") {\nreturn true;\n}\nif (\nturn_direction == \"right\" &amp;&amp;\nhasTrafficLightShape(\ntl_state, autoware_perception_msgs::msg::TrafficSignalElement::RIGHT_ARROW)) {\nreturn false;\n}\nif (\nturn_direction == \"left\" &amp;&amp;\nhasTrafficLightShape(\ntl_state, autoware_perception_msgs::msg::TrafficSignalElement::LEFT_ARROW)) {\nreturn false;\n}\nif (\nturn_direction == \"straight\" &amp;&amp;\nhasTrafficLightShape(tl_state, autoware_perception_msgs::msg::TrafficSignalElement::UP_ARROW)) {\nreturn false;\n}\n\nreturn true;\n</code></pre>"},{"location":"planning/behavior_velocity_traffic_light_module/#_3","title":"\u505c\u6b62\u3059\u308b\u6761\u4ef6\u3068\u72b6\u614b\u9077\u79fb\u3068\u30d2\u30b9\u30c6\u30ea\u30b7\u30b9","text":""},{"location":"planning/behavior_velocity_traffic_light_module/#_4","title":"\u72b6\u614b\u9077\u79fb","text":"<p>\u72b6\u614b\u306f<code>APPROACH</code>\u3068<code>GO_OUT</code>\u306e2\u7a2e\u985e\u3042\u308b\uff0e\u521d\u671f\u72b6\u614b\u306f<code>APPROACH</code>\u3067\u3042\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:173:173<pre><code>  state_(State::APPROACH),\n</code></pre> <p>\u505c\u6b62\u7dda\u307e\u3067\u306e\u8ddd\u96e2<code>d</code>\u306b\u3088\u3063\u3066</p> <ul> <li><code>d &gt; 1.0</code><ul> <li><code>GO</code> -&gt; <code>APPROACH</code></li> </ul> </li> <li><code>d &lt; -2.0</code><ul> <li><code>APPROACH</code> -&gt; <code>GO</code></li> </ul> </li> </ul> <p>\u3068\u72b6\u614b\u9077\u79fb\u3057\uff0c\u521d\u671f\u72b6\u614b\u306f<code>GO</code>\u306a\u306e\u3067</p> <ul> <li>\u3082\u3057ego\u304c\u4fe1\u53f7\u505c\u6b62\u7dda\u304b\u3089\u8ddd\u96e21m\u4ee5\u5185\u306e\u4f4d\u7f6e\u304b\uff0c\u4fe1\u53f7\u505c\u6b62\u7dda\u3092\u904e\u304e\u305f\u4f4d\u7f6e\u304b\u3089engage\u3057\u305f\u5834\u5408\u306f\u4e00\u5207\u505c\u6b62\u3057\u306a\u3044</li> <li>\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u5fc5\u305a<code>APPROACH</code>\u306b\u9077\u79fb\u3059\u308b\u306e\u3067\u505c\u6b62\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b</li> </ul>"},{"location":"planning/behavior_velocity_traffic_light_module/#_5","title":"\u505c\u6b62\u3059\u308b\u6761\u4ef6","text":"<p>RTC\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u5074\u306e\u505c\u6b62\u5224\u65ad\u3068\u5b9f\u969b\u306e\u505c\u6b62\u6319\u52d5\u306f\u8ad6\u7406\u7684\u306b\u5206\u96e2\u3057\u3066\u3044\u308b\uff0e</p> <ol> <li><code>setSafe(false)</code>\u3092\u9001\u308b\u6761\u4ef6</li> <li><code>not isActivated()</code>\u306e\u5834\u5408\u306b\u505c\u6b62\u3059\u308b\u8ffd\u52a0\u6761\u4ef6</li> </ol> <p>\u306b\u5206\u3051\u3066\u8aac\u660e\u3059\u308b\uff0e</p>"},{"location":"planning/behavior_velocity_traffic_light_module/#setsafefalse","title":"setSafe(false)\u3092\u9001\u308b\u6761\u4ef6","text":"<p>\u72b6\u614b\u304c<code>APPROACH</code>\u3067\u3042\u308b\u3053\u3068\uff0c\u304b\u3064\u4fe1\u53f7\u306e\u8272\u3084\u77e2\u5370\u306e\u60c5\u5831\u7684\u306b<code>isStopSignal() == true</code>\u3067\u3042\u308b\u3053\u3068\u304c\u5fc5\u8981\u6761\u4ef6\u3067\u3042\u308b\uff0e\u305d\u308c\u306b\u52a0\u3048\uff0c</p> <ul> <li><code>isStopSignal() == true</code>\u306b\u306a\u3063\u3066\u304b\u3089<code>$stop_time_histeresis</code>\u4ee5\u4e0a\u306e\u6642\u9593\u304c\u7d4c\u3063\u305f\uff0e\u3053\u308c\u306b\u3088\u308a<code>is_prev_state_stop_ == true</code>\u306b\u79fb\u884c\u3059\u308b OR</li> <li>\u3059\u3067\u306b<code>is_prev_state_stop_ == true</code>\u3067\u3042\u308b</li> </ul> <p>\u3067\u3042\u308c\u3070<code>setSafe(false)</code>\u3092\u9001\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:244:255@modifyPathVelocity<pre><code>    const double time_diff =\nstop_signal_received_time_ptr_\n? std::max((clock_-&gt;now() - *stop_signal_received_time_ptr_).seconds(), 0.0)\n: 0.0;\nconst bool to_be_stopped =\nis_stop_signal &amp;&amp; (is_prev_state_stop_ || time_diff &gt; planner_param_.stop_time_hysteresis);\n\nsetSafe(!to_be_stopped);\nif (isActivated()) {\nis_prev_state_stop_ = false;\nreturn true;\n}\n</code></pre>"},{"location":"planning/behavior_velocity_traffic_light_module/#not-isactivated","title":"not isActivated()\u306e\u5834\u5408\u306b\u505c\u6b62\u3059\u308b\u8ffd\u52a0\u6761\u4ef6","text":"<p>\u8ffd\u52a0\u3067<code>isPassthrough() == false</code>\u3067\u3042\u308c\u3070\u505c\u6b62\u3059\u308b(<code>is_prev_state_stop_ == true</code>\u306b\u306a\u308b)\uff0e</p> <p><code>stoppable</code>\u306f\u5236\u52d5\u8ddd\u96e2\u7684\u306b\u505c\u6b62\u53ef\u80fd(\u307e\u305f\u306f\u5341\u5206\u901f\u5ea6\u304c\u4f4e\u3044)\u304b\u3069\u3046\u304b\u3092\u8868\u3059\u5909\u6570\u3067\u3042\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:331:341@isPassthrough<pre><code>  const double pass_judge_line_distance = planning_utils::calcJudgeLineDistWithJerkLimit(\nplanner_data_-&gt;current_velocity-&gt;twist.linear.x,\nplanner_data_-&gt;current_acceleration-&gt;accel.accel.linear.x, max_acc, max_jerk,\ndelay_response_time);\n\nconst bool distance_stoppable = pass_judge_line_distance &lt; signed_arc_length;\nconst bool slow_velocity = planner_data_-&gt;current_velocity-&gt;twist.linear.x &lt; 2.0;\nconst bool stoppable = distance_stoppable || slow_velocity;\nconst bool reachable = signed_arc_length &lt; reachable_distance;\n\nconst auto &amp; enable_pass_judge = planner_param_.enable_pass_judge;\n</code></pre> <p>\u307e\u305a</p> <ul> <li><code>$enable_pass_judge == false</code></li> <li><code>stoppable == true</code></li> <li><code>is_prev_state_stop_ == true</code></li> </ul> <p>\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308c\u3070\u3053\u306e\u95a2\u6570\u306f\u5e38\u306b<code>false</code>\u3092\u8fd4\u3059\u306e\u3067\u505c\u6b62\u3059\u308b\uff0e</p> <p>\u4e0a\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u6210\u308a\u7acb\u305f\u306a\u3044\u5834\u5408\uff0c\u505c\u6b62\u7dda\u307e\u3067\u306e\u8ddd\u96e2\u304c\u4ee5\u4e0b\u306e<code>reachable_distance</code>\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u505c\u6b62\u3059\u308b\uff0e</p> behavior_velocity_traffic_light_module/src/scene.cpp:326:327@isPassthrough<pre><code>  const double reachable_distance =\nplanner_data_-&gt;current_velocity-&gt;twist.linear.x * planner_param_.yellow_lamp_period;\n</code></pre> behavior_velocity_traffic_light_module/src/scene.cpp:347:352@isPassthrough<pre><code>    if (!reachable) {\n// dilemma zone: emergency stop\nRCLCPP_WARN_THROTTLE(\nlogger_, *clock_, 1000,\n\"[traffic_light] cannot pass through intersection during yellow lamp!\");\nreturn false;\n</code></pre>"},{"location":"en/#autoware-universe-code-reading","title":"Autoware Universe Code Reading","text":"<p>English version will be available in the final release</p>"}]}